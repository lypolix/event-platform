package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"event-platform/graph/model"
	"fmt"
)

// CreateEvent is the resolver for the createEvent field.
func (r *mutationResolver) CreateEvent(ctx context.Context, title string, description *string, dateTime string) (*model.Event, error) {
	panic(fmt.Errorf("not implemented: CreateEvent - createEvent"))
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, name string, email string, password string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: CreateUser - createUser"))
}

// SubscribeToEvent is the resolver for the subscribeToEvent field.
func (r *mutationResolver) SubscribeToEvent(ctx context.Context, eventID string) (*model.Subscription, error) {
	panic(fmt.Errorf("not implemented: SubscribeToEvent - subscribeToEvent"))
}

// SubscribeToUser is the resolver for the subscribeToUser field.
func (r *mutationResolver) SubscribeToUser(ctx context.Context, userID string) (*model.Subscription, error) {
	panic(fmt.Errorf("not implemented: SubscribeToUser - subscribeToUser"))
}

// Events is the resolver for the events field.
func (r *queryResolver) Events(ctx context.Context) ([]*model.Event, error) {
	panic(fmt.Errorf("not implemented: Events - events"))
}

// Event is the resolver for the event field.
func (r *queryResolver) Event(ctx context.Context, id string) (*model.Event, error) {
	panic(fmt.Errorf("not implemented: Event - event"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// ID is the resolver for the id field.
func (r *subscriptionResolver) ID(ctx context.Context) (<-chan string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// Subscriber is the resolver for the subscriber field.
func (r *subscriptionResolver) Subscriber(ctx context.Context) (<-chan *model.User, error) {
	panic(fmt.Errorf("not implemented: Subscriber - subscriber"))
}

// Event is the resolver for the event field.
func (r *subscriptionResolver) Event(ctx context.Context) (<-chan *model.Event, error) {
	panic(fmt.Errorf("not implemented: Event - event"))
}

// SubscribedToUser is the resolver for the subscribedToUser field.
func (r *subscriptionResolver) SubscribedToUser(ctx context.Context) (<-chan *model.User, error) {
	panic(fmt.Errorf("not implemented: SubscribedToUser - subscribedToUser"))
}

// EventCreated is the resolver for the eventCreated field.
func (r *subscriptionResolver) EventCreated(ctx context.Context) (<-chan *model.Event, error) {
	panic(fmt.Errorf("not implemented: EventCreated - eventCreated"))
}

// UserCreated is the resolver for the userCreated field.
func (r *subscriptionResolver) UserCreated(ctx context.Context) (<-chan *model.User, error) {
	panic(fmt.Errorf("not implemented: UserCreated - userCreated"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
