package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"event-platform/graph/model"
	"fmt"
)

// Реализация мутаций
func (r *mutationResolver) CreateEvent(ctx context.Context, title string, description *string, dateTime string) (*model.Event, error) {
	event := &model.Event{
		Title:       title,
		Description: description,
		DateTime:    dateTime,
		// Организатора можно добавить по бизнес-логике
	}
	id, err := r.EventService.CreateEvent(ctx, event)
	if err != nil {
		return nil, err
	}
	event.ID = id
	return event, nil
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, name string, email string, password string) (*model.User, error) {
	user := &model.User{
		Name:  name,
		Email: email,
		// Пароль можно захешировать, добавить в модель если нужно
	}
	id, err := r.UserService.CreateUser(ctx, user)
	if err != nil {
		return nil, err
	}
	user.ID = id
	return user, nil
}

// SubscribeToEvent is the resolver for the subscribeToEvent field.
func (r *mutationResolver) SubscribeToEvent(ctx context.Context, eventID string) (*model.Subscription, error) {
	// Реализацию нужно доделать согласно вашей логике подписки
	return nil, fmt.Errorf("SubscribeToEvent not implemented")
}

// SubscribeToUser is the resolver for the subscribeToUser field.
func (r *mutationResolver) SubscribeToUser(ctx context.Context, userID string) (*model.Subscription, error) {
	// Реализацию нужно доделать согласно вашей логике подписки
	return nil, fmt.Errorf("SubscribeToUser not implemented")
}

// Реализация запросов
func (r *queryResolver) Events(ctx context.Context) ([]*model.Event, error) {
	return r.EventService.ListEvents(ctx)
}

// Event is the resolver for the event field.
func (r *queryResolver) Event(ctx context.Context, id string) (*model.Event, error) {
	return r.EventService.GetEventByID(ctx, id)
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	return r.UserService.ListUsers(ctx)
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	return r.UserService.GetUserByID(ctx, id)
}

// Заглушки подписок (если подписки не нужны, можно вернуть ошибку или nil)
func (r *subscriptionResolver) ID(ctx context.Context) (<-chan string, error) {
	return nil, fmt.Errorf("not implemented")
}

// Subscriber is the resolver for the subscriber field.
func (r *subscriptionResolver) Subscriber(ctx context.Context) (<-chan *model.User, error) {
	return nil, fmt.Errorf("not implemented")
}

// Event is the resolver for the event field.
func (r *subscriptionResolver) Event(ctx context.Context) (<-chan *model.Event, error) {
	return nil, fmt.Errorf("not implemented")
}

// SubscribedToUser is the resolver for the subscribedToUser field.
func (r *subscriptionResolver) SubscribedToUser(ctx context.Context) (<-chan *model.User, error) {
	return nil, fmt.Errorf("not implemented")
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
